# -*- coding: utf-8 -*-
# =============================================================================
# module : hqc_view/utils/log/manifest.enaml
# author : Matthieu Dartiailh
# license : MIT license
# =============================================================================
"""
"""
from enaml.workbench.api import PluginManifest, Extension
from enaml.workbench.core.api import Command

from hqc_meas.utils.state.api import State
from hqc_meas.utils.preferences.api import Preferences


def log_plugin_factory():
    """ Factory function for the LogPlugin.

    """
    from .plugin import LogPlugin
    return LogPlugin()


def start_logging(event):
    """ Handler for the start_logging command.

    """
    plugin = event.workbench.get_plugin('hqc_meas.logging')
    return plugin.start_logging(**event.parameters)


def add_handler(event):
    """Handler for the add_handler command.

    """
    plugin = event.workbench.get_plugin('hqc_meas.logging')
    return plugin.add_handler(**event.parameters)


def remove_handler(event):
    """Handler for the remove_handler command.

    """
    plugin = event.workbench.get_plugin('hqc_meas.logging')
    return plugin.remove_handler(**event.parameters)


def add_filter(event):
    """Handler for the add_filter command.

    """
    plugin = event.workbench.get_plugin('hqc_meas.logging')
    return plugin.add_filter(**event.parameters)


def remove_filter(event):
    """Handler for the remove_filter command.

    """
    plugin = event.workbench.get_plugin('hqc_meas.logging')
    return plugin.remove_filter(**event.parameters)


def set_formatter(event):
    """Handler for the set_formatter command.

    """
    plugin = event.workbench.get_plugin('hqc_meas.logging')
    return plugin.set_formatter(**event.parameters)


START_LOGGING_DESCRIPTION = \
""" Start the logging system for the application."""

ADD_HANDLER_DESCRIPTION = \
""" Add a handler ('id', 'handler') to the specified logger ('logger'). The
'mode' keyword can be used to autobuild a standard handler. """

REMOVE_HANDLER_DESCRIPTION = \
""" Remove a handler given its id."""

ADD_FILTER_DESCRIPTION = \
"""Add a filter ('id', 'filter') to the specified handler ('handler_id')."""

REMOVE_FILTER_DESCRIPTION = \
""" Remove a filter given its id."""

SET_FORMATTER_DESCRIPTION = \
""" Set the formatter ('formatter') for a given handler ('handler_id')."""


enamldef LogManifest(PluginManifest):
    """ Manifest for the plugin handling logging for an application.

    """
    id = u'hqc_meas.logging'
    factory = log_plugin_factory

    Extension:
        id = 'state'
        point = 'hqc_meas.state.states'
        State:
            id = 'logging'
            sync_members = ['handler_ids', 'filter_ids']

    Extension:
        id = 'prefs'
        point = u'hqc_meas.preferences.pref_plugin'
        Preferences:
            pass

    Extension:
        id = 'commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = 'hqc_meas.logging.start_logging'
            description = START_LOGGING_DESCRIPTION
            handler = start_logging
        Command:
            id = 'hqc_meas.logging.add_handler'
            description = ADD_HANDLER_DESCRIPTION
            handler = add_handler
        Command:
            id = 'hqc_meas.logging.remove_handler'
            description = REMOVE_HANDLER_DESCRIPTION
            handler = remove_handler
        Command:
            id = 'hqc_meas.logging.add_filter'
            description = ADD_FILTER_DESCRIPTION
            handler = add_filter
        Command:
            id = 'hqc_meas.logging.remove_filter'
            description = REMOVE_FILTER_DESCRIPTION
            handler = remove_filter
        Command:
            id = 'hqc_meas.logging.set_formatter'
            description = SET_FORMATTER_DESCRIPTION
            handler = set_formatter

    # TODO add pref for defaut logging loaction
