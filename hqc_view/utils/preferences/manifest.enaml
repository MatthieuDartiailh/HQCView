# -*- coding: utf-8 -*-
# =============================================================================
# module : hqc_view/utils/preferences/manifest.py
# author : Matthieu Dartiailh
# license : MIT license
# =============================================================================
"""
"""
from enaml.workbench.api import PluginManifest, Extension, ExtensionPoint
from enaml.workbench.core.api import Command
from enaml.workbench.ui.api import ActionItem, MenuItem, ItemGroup
from enaml.widgets.api import FileDialogEx


def preference_plugin_factory():
    """ Factory function for the PrefPlugin

    """
    from .plugin import PrefPlugin
    return PrefPlugin()


def save_preferences(event):
    """ Handler for the 'hqc_meas.preferences.save' command

    """
    pref = event.workbench.get_plugin('hqc_meas.preferences')
    if 'ask_user' in event.parameters:
        path = FileDialogEx.get_save_file_name(name_filters=['*.ini'])
        if path:
            pref.save_preferences(path=path)
    elif 'path' in event.parameters:
        pref.save_preferences(path=event.parameters['path'])
    else:
        pref.save_preferences()


def load_preferences(event):
    """ Handler for the 'hqc_meas.preferences.load' command

    """
    pref = event.workbench.get_plugin('hqc_meas.preferences')
    if 'ask_user' in event.parameters:
        ini_path = event.parameters.get('path')
        path = FileDialogEx.get_open_file_name(current_path=ini_path,
                                               name_filters=['*.ini'])
        if path:
            pref.load_preferences(path=path)
    elif 'path' in event.parameters:
        pref.load_preferences(path=event.parameters['path'])
    else:
        pref.load_preferences()


def plugin_init_complete(event):
    """
    """
    pref = event.workbench.get_plugin('hqc_meas.preferences')
    return pref.plugin_init_complete(event.parameters['plugin_id'])


def get_plugin_preferences(event):
    """ Handler for the 'hqc_meas.preferences.get_plugin_pref' command

    """
    pref = event.workbench.get_plugin('hqc_meas.preferences')
    return pref.plugin_preferences(event.parameters['plugin_id'])


def update_plugin_preferences(event):
    """ Handler for the 'hqc_meas.preferences.update_plugin_pref' command

    """
    pref = event.workbench.get_plugin('hqc_meas.preferences')
    pref.update_plugin_preferences(event.parameters['plugin_id'])

# TODO implement pref editor

PREF_PLUGINS_DESCRIPTION = \
"""Plugins which uses the built in preferences system should provide an
extension to this point in the form of a Preferences object so that they are
hooked up in the automatic saving of preferences."""

SAVE_PREFERENCES_DESCRIPTION = \
""" This command will save the current preferences. If a 'ask_user' keyword is
provided it will ask the user to give the path to which the preferences should
be saved. If a 'path' keyword is provided the preferencs will be saved to the
file towards which the path points. If both keywords are provided the 'path'
will be used as a starting point for the file dialog. In the absence of
keywords preferences will be saved to the default location."""

LOAD_PREFERENCES_DESCRIPTION = \
""" This command will load the preferences. If a 'ask_user' keyword is
provided it will ask the user to give the path of the file in which the
preferences are stored. If a 'path' keyword is provided the preferencs will be
loaded from the file towards which the path points. If both keywords are
provided the 'path' will be used as a starting point for the file dialog.
In the absence of keywords preferences will be loaded from the default
location."""

PLUGIN_INIT_COMPLETE_DESCRIPTION = \
""" Notify the preference plugin that a contributing plugin has completed its
initialisation, ie auto saved members can now be connected. """

GET_PLUGIN_PREF_DESCRIPTION = \
""" Return the preferences stored for a given plugin as a dict composed only
of strings."""

UPDATE_PLUGIN_PREF_DESCRIPTION = \
""" Update the values stored as preferences using the given dictionnary. """

OPEN_EDITOR_DESCRIPTION = \
""" Open the preference editor dialog. """

enamldef PreferencesManifest(PluginManifest):
    """
    """
    id = 'hqc_meas.preferences'
    factory = preference_plugin_factory

    ExtensionPoint:
        id = 'pref_plugin'
        description = PREF_PLUGINS_DESCRIPTION
    Extension:
        id = 'commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = 'hqc_meas.preferences.save'
            description = SAVE_PREF_DESCRIPTION
            handler = save_preferences
        Command:
            id = 'hqc_meas.preferences.load'
            description = LOAD_PREF_DESCRIPTION
            handler = load_preferences
        Command:
            id = 'hqc_meas.preferences.plugin_init_complete'
            description = PLUGIN_INIT_COMPLETE_DESCRIPTION
            handler = plugin_init_complete
        Command:
            id = 'hqc_meas.preferences.get_plugin_prefs'
            description = GET_PLUGIN_PREF_DESCRIPTION
            handler = get_plugin_preferences
        Command:
            id = 'hqc_meas.preferences.update_plugin_prefs'
            description = UPDATE_PLUGIN_PREF_DESCRIPTION
            handler = update_plugin_preferences
#        Command:
#            id = 'hqc_meas.preferences.open_editor'
#            description = OPEN_EDITOR_DESCRIPTION
#            handler = open_editor
    Extension:
        id = 'menus'
        point = 'enaml.workbench.ui.actions'
        MenuItem:
            path = '/prefs'
            label = 'Preferences'
            before = 'tools'
            after = 'file'
            ItemGroup:
                id = 'pref'
        ActionItem:
            path = '/prefs/save'
            label = 'Save'
            group = 'pref'
            command = 'hqc_meas.preferences.save'
            parameters = {'ask_user': True}
        ActionItem:
            path = '/prefs/load'
            label = 'Load'
            group = 'pref'
            command = 'hqc_meas.preferences.load'
            parameters = {'ask_user': True}
        ActionItem:
            path = '/prefs/save_default'
            label = 'Save default'
            group = 'pref'
            command = 'hqc_meas.preferences.save'
        ActionItem:
            path = '/prefs/load_default'
            label = 'Load default'
            group = 'pref'
            command = 'hqc_meas.preferences.load'
#        ActionItem:
#            path = '/prefs/edit'
#            label = 'Edit'
#            command = 'hqc_meas.preferences.open_editor'
